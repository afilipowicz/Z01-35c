# coding: utf-8

"""
    Daily Forecast API

    The daily forecast API returns the geocode weather forecasts for the current day up to the days duration in the API endpoint. The daily forecast product can contain multiple days of daily forecasts for each location. Each day of a forecast can contain up to (3) \"temporal segments\" meaning three separate forecasts. For any given forecast day we offer day, night, and a 24-hour forecast (daily summary).   • Standard HTTP Cache-Control headers are used to define caching length. The TTL value is provided in the HTTP Header as an absolute time value using the “Expires” parameter. Example:  “Expires: Fri, 12 Jul 2013 12:00:00 GMT”.   • REQUIRED: HEADER Accept-Encoding: gzip  • All requests to the API’s should request that the response be compressed. Supported encoding format is: gzip  • PLEASE NOTE: The Day object will no longer appear in the API after 3:00pm Local Apparent Time. At 3pm Local Apparent Time, we recommend that your application no longer displays the Day object.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_sun_daily_forecast_by_geocode(self, latitude, longitude, days, accept_encoding, **kwargs):  # noqa: E501
        """Forecast by Geocode  # noqa: E501

        The forecast API returns the geocode weather forecasts for the current day up to the endpoint duration in days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sun_daily_forecast_by_geocode(latitude, longitude, days, accept_encoding, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str latitude: The latitude for the requested forecast. For example, 33.40. (required)
        :param str longitude: The longitude for the requested forecast. For example -83.42. (required)
        :param int days: (required)
        :param str accept_encoding: Required to be set to gzip to ensure that the response is compressed (required)
        :param str units: The units of measure to return the data in. For example, e=Imperial(English), m=Metric, h=Hybrid. Some APIs require the units of measure.
        :param str language: The language to return the response in. For example, en-US, es, es-MX, fr-FR.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SuccessSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sun_daily_forecast_by_geocode_with_http_info(latitude, longitude, days, accept_encoding, **kwargs)  # noqa: E501

    def get_sun_daily_forecast_by_geocode_with_http_info(self, latitude, longitude, days, accept_encoding, **kwargs):  # noqa: E501
        """Forecast by Geocode  # noqa: E501

        The forecast API returns the geocode weather forecasts for the current day up to the endpoint duration in days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sun_daily_forecast_by_geocode_with_http_info(latitude, longitude, days, accept_encoding, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str latitude: The latitude for the requested forecast. For example, 33.40. (required)
        :param str longitude: The longitude for the requested forecast. For example -83.42. (required)
        :param int days: (required)
        :param str accept_encoding: Required to be set to gzip to ensure that the response is compressed (required)
        :param str units: The units of measure to return the data in. For example, e=Imperial(English), m=Metric, h=Hybrid. Some APIs require the units of measure.
        :param str language: The language to return the response in. For example, en-US, es, es-MX, fr-FR.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SuccessSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'latitude',
            'longitude',
            'days',
            'accept_encoding',
            'units',
            'language'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sun_daily_forecast_by_geocode" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'latitude' is set
        if self.api_client.client_side_validation and ('latitude' not in local_var_params or  # noqa: E501
                                                        local_var_params['latitude'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `latitude` when calling `get_sun_daily_forecast_by_geocode`")  # noqa: E501
        # verify the required parameter 'longitude' is set
        if self.api_client.client_side_validation and ('longitude' not in local_var_params or  # noqa: E501
                                                        local_var_params['longitude'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `longitude` when calling `get_sun_daily_forecast_by_geocode`")  # noqa: E501
        # verify the required parameter 'days' is set
        if self.api_client.client_side_validation and ('days' not in local_var_params or  # noqa: E501
                                                        local_var_params['days'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `days` when calling `get_sun_daily_forecast_by_geocode`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if self.api_client.client_side_validation and ('accept_encoding' not in local_var_params or  # noqa: E501
                                                        local_var_params['accept_encoding'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accept_encoding` when calling `get_sun_daily_forecast_by_geocode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'latitude' in local_var_params:
            path_params['latitude'] = local_var_params['latitude']  # noqa: E501
        if 'longitude' in local_var_params:
            path_params['longitude'] = local_var_params['longitude']  # noqa: E501
        if 'days' in local_var_params:
            path_params['days'] = local_var_params['days']  # noqa: E501

        query_params = []
        if 'units' in local_var_params and local_var_params['units'] is not None:  # noqa: E501
            query_params.append(('units', local_var_params['units']))  # noqa: E501
        if 'language' in local_var_params and local_var_params['language'] is not None:  # noqa: E501
            query_params.append(('language', local_var_params['language']))  # noqa: E501

        header_params = {}
        if 'accept_encoding' in local_var_params:
            header_params['Accept-Encoding'] = local_var_params['accept_encoding']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/geocode/{latitude}/{longitude}/forecast/daily/{days}day.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sun_daily_forecast_by_location(self, postal_code, days, accept_encoding, **kwargs):  # noqa: E501
        """Forecast by Postal Code  # noqa: E501

        The forecast API returns the postal code weather forecasts for the current day up to the endpoint duration in days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sun_daily_forecast_by_location(postal_code, days, accept_encoding, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str postal_code: (required)
        :param int days: (required)
        :param str accept_encoding: Required to be set to gzip to ensure that the response is compressed (required)
        :param str units: The units of measure to return the data in. For example, e=Imperial(English), m=Metric, h=Hybrid. Some APIs require the units of measure.
        :param str language: The language to return the response in. For example, en-US, es, es-MX, fr-FR.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: SuccessSchema
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_sun_daily_forecast_by_location_with_http_info(postal_code, days, accept_encoding, **kwargs)  # noqa: E501

    def get_sun_daily_forecast_by_location_with_http_info(self, postal_code, days, accept_encoding, **kwargs):  # noqa: E501
        """Forecast by Postal Code  # noqa: E501

        The forecast API returns the postal code weather forecasts for the current day up to the endpoint duration in days.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sun_daily_forecast_by_location_with_http_info(postal_code, days, accept_encoding, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str postal_code: (required)
        :param int days: (required)
        :param str accept_encoding: Required to be set to gzip to ensure that the response is compressed (required)
        :param str units: The units of measure to return the data in. For example, e=Imperial(English), m=Metric, h=Hybrid. Some APIs require the units of measure.
        :param str language: The language to return the response in. For example, en-US, es, es-MX, fr-FR.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(SuccessSchema, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'postal_code',
            'days',
            'accept_encoding',
            'units',
            'language'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sun_daily_forecast_by_location" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'postal_code' is set
        if self.api_client.client_side_validation and ('postal_code' not in local_var_params or  # noqa: E501
                                                        local_var_params['postal_code'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `postal_code` when calling `get_sun_daily_forecast_by_location`")  # noqa: E501
        # verify the required parameter 'days' is set
        if self.api_client.client_side_validation and ('days' not in local_var_params or  # noqa: E501
                                                        local_var_params['days'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `days` when calling `get_sun_daily_forecast_by_location`")  # noqa: E501
        # verify the required parameter 'accept_encoding' is set
        if self.api_client.client_side_validation and ('accept_encoding' not in local_var_params or  # noqa: E501
                                                        local_var_params['accept_encoding'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `accept_encoding` when calling `get_sun_daily_forecast_by_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'postal_code' in local_var_params:
            path_params['postalCode'] = local_var_params['postal_code']  # noqa: E501
        if 'days' in local_var_params:
            path_params['days'] = local_var_params['days']  # noqa: E501

        query_params = []
        if 'units' in local_var_params and local_var_params['units'] is not None:  # noqa: E501
            query_params.append(('units', local_var_params['units']))  # noqa: E501
        if 'language' in local_var_params and local_var_params['language'] is not None:  # noqa: E501
            query_params.append(('language', local_var_params['language']))  # noqa: E501

        header_params = {}
        if 'accept_encoding' in local_var_params:
            header_params['Accept-Encoding'] = local_var_params['accept_encoding']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['api_key']  # noqa: E501

        return self.api_client.call_api(
            '/v1/location/{postalCode}/forecast/daily/{days}day.json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessSchema',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

# coding: utf-8

"""
    Daily Forecast API

    The daily forecast API returns the geocode weather forecasts for the current day up to the days duration in the API endpoint. The daily forecast product can contain multiple days of daily forecasts for each location. Each day of a forecast can contain up to (3) \"temporal segments\" meaning three separate forecasts. For any given forecast day we offer day, night, and a 24-hour forecast (daily summary).   • Standard HTTP Cache-Control headers are used to define caching length. The TTL value is provided in the HTTP Header as an absolute time value using the “Expires” parameter. Example:  “Expires: Fri, 12 Jul 2013 12:00:00 GMT”.   • REQUIRED: HEADER Accept-Encoding: gzip  • All requests to the API’s should request that the response be compressed. Supported encoding format is: gzip  • PLEASE NOTE: The Day object will no longer appear in the API after 3:00pm Local Apparent Time. At 3pm Local Apparent Time, we recommend that your application no longer displays the Day object.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Forecast(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_class': 'str',
        'expire_time_gmt': 'float',
        'fcst_valid': 'float',
        'fcst_valid_local': 'str',
        'num': 'int',
        'max_temp': 'int',
        'min_temp': 'int',
        'torcon': 'int',
        'stormcon': 'int',
        'blurb': 'str',
        'blurb_author': 'str',
        'lunar_phase_day': 'int',
        'dow': 'str',
        'lunar_phase': 'str',
        'lunar_phase_code': 'str',
        'sunrise': 'str',
        'sunset': 'str',
        'moonrise': 'str',
        'moonset': 'str',
        'qualifier_code': 'str',
        'qualifier': 'str',
        'narrative': 'str',
        'qpf': 'float',
        'snow_qpf': 'float',
        'snow_range': 'str',
        'snow_phrase': 'str',
        'snow_code': 'str'
    }

    attribute_map = {
        '_class': 'class',
        'expire_time_gmt': 'expire_time_gmt',
        'fcst_valid': 'fcst_valid',
        'fcst_valid_local': 'fcst_valid_local',
        'num': 'num',
        'max_temp': 'max_temp',
        'min_temp': 'min_temp',
        'torcon': 'torcon',
        'stormcon': 'stormcon',
        'blurb': 'blurb',
        'blurb_author': 'blurb_author',
        'lunar_phase_day': 'lunar_phase_day',
        'dow': 'dow',
        'lunar_phase': 'lunar_phase',
        'lunar_phase_code': 'lunar_phase_code',
        'sunrise': 'sunrise',
        'sunset': 'sunset',
        'moonrise': 'moonrise',
        'moonset': 'moonset',
        'qualifier_code': 'qualifier_code',
        'qualifier': 'qualifier',
        'narrative': 'narrative',
        'qpf': 'qpf',
        'snow_qpf': 'snow_qpf',
        'snow_range': 'snow_range',
        'snow_phrase': 'snow_phrase',
        'snow_code': 'snow_code'
    }

    def __init__(self, _class=None, expire_time_gmt=None, fcst_valid=None, fcst_valid_local=None, num=None, max_temp=None, min_temp=None, torcon=None, stormcon=None, blurb=None, blurb_author=None, lunar_phase_day=None, dow=None, lunar_phase=None, lunar_phase_code=None, sunrise=None, sunset=None, moonrise=None, moonset=None, qualifier_code=None, qualifier=None, narrative=None, qpf=None, snow_qpf=None, snow_range=None, snow_phrase=None, snow_code=None, local_vars_configuration=None):  # noqa: E501
        """Forecast - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__class = None
        self._expire_time_gmt = None
        self._fcst_valid = None
        self._fcst_valid_local = None
        self._num = None
        self._max_temp = None
        self._min_temp = None
        self._torcon = None
        self._stormcon = None
        self._blurb = None
        self._blurb_author = None
        self._lunar_phase_day = None
        self._dow = None
        self._lunar_phase = None
        self._lunar_phase_code = None
        self._sunrise = None
        self._sunset = None
        self._moonrise = None
        self._moonset = None
        self._qualifier_code = None
        self._qualifier = None
        self._narrative = None
        self._qpf = None
        self._snow_qpf = None
        self._snow_range = None
        self._snow_phrase = None
        self._snow_code = None
        self.discriminator = None

        if _class is not None:
            self._class = _class
        if expire_time_gmt is not None:
            self.expire_time_gmt = expire_time_gmt
        if fcst_valid is not None:
            self.fcst_valid = fcst_valid
        if fcst_valid_local is not None:
            self.fcst_valid_local = fcst_valid_local
        if num is not None:
            self.num = num
        if max_temp is not None:
            self.max_temp = max_temp
        if min_temp is not None:
            self.min_temp = min_temp
        if torcon is not None:
            self.torcon = torcon
        if stormcon is not None:
            self.stormcon = stormcon
        if blurb is not None:
            self.blurb = blurb
        if blurb_author is not None:
            self.blurb_author = blurb_author
        if lunar_phase_day is not None:
            self.lunar_phase_day = lunar_phase_day
        if dow is not None:
            self.dow = dow
        if lunar_phase is not None:
            self.lunar_phase = lunar_phase
        if lunar_phase_code is not None:
            self.lunar_phase_code = lunar_phase_code
        if sunrise is not None:
            self.sunrise = sunrise
        if sunset is not None:
            self.sunset = sunset
        if moonrise is not None:
            self.moonrise = moonrise
        if moonset is not None:
            self.moonset = moonset
        if qualifier_code is not None:
            self.qualifier_code = qualifier_code
        if qualifier is not None:
            self.qualifier = qualifier
        if narrative is not None:
            self.narrative = narrative
        if qpf is not None:
            self.qpf = qpf
        if snow_qpf is not None:
            self.snow_qpf = snow_qpf
        if snow_range is not None:
            self.snow_range = snow_range
        if snow_phrase is not None:
            self.snow_phrase = snow_phrase
        if snow_code is not None:
            self.snow_code = snow_code

    @property
    def _class(self):
        """Gets the _class of this Forecast.  # noqa: E501

        The data identifier: fod_long_range_daily, fod_short_range_daily  # noqa: E501

        :return: The _class of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Forecast.

        The data identifier: fod_long_range_daily, fod_short_range_daily  # noqa: E501

        :param _class: The _class of this Forecast.  # noqa: E501
        :type: str
        """

        self.__class = _class

    @property
    def expire_time_gmt(self):
        """Gets the expire_time_gmt of this Forecast.  # noqa: E501

        The expiration time in unix seconds: 1471539254  # noqa: E501

        :return: The expire_time_gmt of this Forecast.  # noqa: E501
        :rtype: float
        """
        return self._expire_time_gmt

    @expire_time_gmt.setter
    def expire_time_gmt(self, expire_time_gmt):
        """Sets the expire_time_gmt of this Forecast.

        The expiration time in unix seconds: 1471539254  # noqa: E501

        :param expire_time_gmt: The expire_time_gmt of this Forecast.  # noqa: E501
        :type: float
        """

        self._expire_time_gmt = expire_time_gmt

    @property
    def fcst_valid(self):
        """Gets the fcst_valid of this Forecast.  # noqa: E501

        The forecast valid time in unix seconds: 1471518000  # noqa: E501

        :return: The fcst_valid of this Forecast.  # noqa: E501
        :rtype: float
        """
        return self._fcst_valid

    @fcst_valid.setter
    def fcst_valid(self, fcst_valid):
        """Sets the fcst_valid of this Forecast.

        The forecast valid time in unix seconds: 1471518000  # noqa: E501

        :param fcst_valid: The fcst_valid of this Forecast.  # noqa: E501
        :type: float
        """

        self._fcst_valid = fcst_valid

    @property
    def fcst_valid_local(self):
        """Gets the fcst_valid_local of this Forecast.  # noqa: E501

        The valid time forecast in local apparent time: \"2016-08-18T07:00:00-0400\"  # noqa: E501

        :return: The fcst_valid_local of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._fcst_valid_local

    @fcst_valid_local.setter
    def fcst_valid_local(self, fcst_valid_local):
        """Sets the fcst_valid_local of this Forecast.

        The valid time forecast in local apparent time: \"2016-08-18T07:00:00-0400\"  # noqa: E501

        :param fcst_valid_local: The fcst_valid_local of this Forecast.  # noqa: E501
        :type: str
        """

        self._fcst_valid_local = fcst_valid_local

    @property
    def num(self):
        """Gets the num of this Forecast.  # noqa: E501

        The sequential number that identifies each of the forecasted days in your feed. The numbers start on day 1, which is the forecast for the current day. Then the forecast for tomorrow uses number 2, then number 3 for the day after tomorrow, and so forth  # noqa: E501

        :return: The num of this Forecast.  # noqa: E501
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this Forecast.

        The sequential number that identifies each of the forecasted days in your feed. The numbers start on day 1, which is the forecast for the current day. Then the forecast for tomorrow uses number 2, then number 3 for the day after tomorrow, and so forth  # noqa: E501

        :param num: The num of this Forecast.  # noqa: E501
        :type: int
        """

        self._num = num

    @property
    def max_temp(self):
        """Gets the max_temp of this Forecast.  # noqa: E501

        Daily maximum temperature  # noqa: E501

        :return: The max_temp of this Forecast.  # noqa: E501
        :rtype: int
        """
        return self._max_temp

    @max_temp.setter
    def max_temp(self, max_temp):
        """Sets the max_temp of this Forecast.

        Daily maximum temperature  # noqa: E501

        :param max_temp: The max_temp of this Forecast.  # noqa: E501
        :type: int
        """

        self._max_temp = max_temp

    @property
    def min_temp(self):
        """Gets the min_temp of this Forecast.  # noqa: E501

        Daily minimum temperature  # noqa: E501

        :return: The min_temp of this Forecast.  # noqa: E501
        :rtype: int
        """
        return self._min_temp

    @min_temp.setter
    def min_temp(self, min_temp):
        """Sets the min_temp of this Forecast.

        Daily minimum temperature  # noqa: E501

        :param min_temp: The min_temp of this Forecast.  # noqa: E501
        :type: int
        """

        self._min_temp = min_temp

    @property
    def torcon(self):
        """Gets the torcon of this Forecast.  # noqa: E501

        The estimate of the likelihood of tornado activity during a given 24 hour forecast period.  # noqa: E501

        :return: The torcon of this Forecast.  # noqa: E501
        :rtype: int
        """
        return self._torcon

    @torcon.setter
    def torcon(self, torcon):
        """Sets the torcon of this Forecast.

        The estimate of the likelihood of tornado activity during a given 24 hour forecast period.  # noqa: E501

        :param torcon: The torcon of this Forecast.  # noqa: E501
        :type: int
        """

        self._torcon = torcon

    @property
    def stormcon(self):
        """Gets the stormcon of this Forecast.  # noqa: E501

        The estimate of the likelihood of winter storm activity during a given 24 hour forecast period.  # noqa: E501

        :return: The stormcon of this Forecast.  # noqa: E501
        :rtype: int
        """
        return self._stormcon

    @stormcon.setter
    def stormcon(self, stormcon):
        """Sets the stormcon of this Forecast.

        The estimate of the likelihood of winter storm activity during a given 24 hour forecast period.  # noqa: E501

        :param stormcon: The stormcon of this Forecast.  # noqa: E501
        :type: int
        """

        self._stormcon = stormcon

    @property
    def blurb(self):
        """Gets the blurb of this Forecast.  # noqa: E501

        A handwritten local or regional text forecast created by a meteorologist to supplement the system-generated forecast.  # noqa: E501

        :return: The blurb of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._blurb

    @blurb.setter
    def blurb(self, blurb):
        """Sets the blurb of this Forecast.

        A handwritten local or regional text forecast created by a meteorologist to supplement the system-generated forecast.  # noqa: E501

        :param blurb: The blurb of this Forecast.  # noqa: E501
        :type: str
        """

        self._blurb = blurb

    @property
    def blurb_author(self):
        """Gets the blurb_author of this Forecast.  # noqa: E501

        The name initials of the meteorologist who authored the forecast blur.  # noqa: E501

        :return: The blurb_author of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._blurb_author

    @blurb_author.setter
    def blurb_author(self, blurb_author):
        """Sets the blurb_author of this Forecast.

        The name initials of the meteorologist who authored the forecast blur.  # noqa: E501

        :param blurb_author: The blurb_author of this Forecast.  # noqa: E501
        :type: str
        """

        self._blurb_author = blurb_author

    @property
    def lunar_phase_day(self):
        """Gets the lunar_phase_day of this Forecast.  # noqa: E501

        Day number within monthly lunar cycle  # noqa: E501

        :return: The lunar_phase_day of this Forecast.  # noqa: E501
        :rtype: int
        """
        return self._lunar_phase_day

    @lunar_phase_day.setter
    def lunar_phase_day(self, lunar_phase_day):
        """Sets the lunar_phase_day of this Forecast.

        Day number within monthly lunar cycle  # noqa: E501

        :param lunar_phase_day: The lunar_phase_day of this Forecast.  # noqa: E501
        :type: int
        """

        self._lunar_phase_day = lunar_phase_day

    @property
    def dow(self):
        """Gets the dow of this Forecast.  # noqa: E501

        Day of week  # noqa: E501

        :return: The dow of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._dow

    @dow.setter
    def dow(self, dow):
        """Sets the dow of this Forecast.

        Day of week  # noqa: E501

        :param dow: The dow of this Forecast.  # noqa: E501
        :type: str
        """

        self._dow = dow

    @property
    def lunar_phase(self):
        """Gets the lunar_phase of this Forecast.  # noqa: E501

        Description phrase for the current lunar phase  # noqa: E501

        :return: The lunar_phase of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._lunar_phase

    @lunar_phase.setter
    def lunar_phase(self, lunar_phase):
        """Sets the lunar_phase of this Forecast.

        Description phrase for the current lunar phase  # noqa: E501

        :param lunar_phase: The lunar_phase of this Forecast.  # noqa: E501
        :type: str
        """

        self._lunar_phase = lunar_phase

    @property
    def lunar_phase_code(self):
        """Gets the lunar_phase_code of this Forecast.  # noqa: E501

        3 character short code for lunar phases  # noqa: E501

        :return: The lunar_phase_code of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._lunar_phase_code

    @lunar_phase_code.setter
    def lunar_phase_code(self, lunar_phase_code):
        """Sets the lunar_phase_code of this Forecast.

        3 character short code for lunar phases  # noqa: E501

        :param lunar_phase_code: The lunar_phase_code of this Forecast.  # noqa: E501
        :type: str
        """

        self._lunar_phase_code = lunar_phase_code

    @property
    def sunrise(self):
        """Gets the sunrise of this Forecast.  # noqa: E501

        The local time of the sunrise. It reflects any local daylight savings conventions. For a few Arctic and Antarctic regions, the Sunrise and Sunset data values may be the same (each with a value of 12:01am) to reflect conditions where a sunrise or sunset does not occur. example: 2016-08-18T07:00:50-0400  # noqa: E501

        :return: The sunrise of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._sunrise

    @sunrise.setter
    def sunrise(self, sunrise):
        """Sets the sunrise of this Forecast.

        The local time of the sunrise. It reflects any local daylight savings conventions. For a few Arctic and Antarctic regions, the Sunrise and Sunset data values may be the same (each with a value of 12:01am) to reflect conditions where a sunrise or sunset does not occur. example: 2016-08-18T07:00:50-0400  # noqa: E501

        :param sunrise: The sunrise of this Forecast.  # noqa: E501
        :type: str
        """

        self._sunrise = sunrise

    @property
    def sunset(self):
        """Gets the sunset of this Forecast.  # noqa: E501

        The local time of the sunset. It reflects any local daylight savings conventions. For a few Arctic and Antarctic regions, the Sunrise and Sunset data values may be the same (each with a value of 12:01am) to reflect conditions where a sunrise or sunset does not occur. example: \"2016-08-18T20:19:22-0400\"  # noqa: E501

        :return: The sunset of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._sunset

    @sunset.setter
    def sunset(self, sunset):
        """Sets the sunset of this Forecast.

        The local time of the sunset. It reflects any local daylight savings conventions. For a few Arctic and Antarctic regions, the Sunrise and Sunset data values may be the same (each with a value of 12:01am) to reflect conditions where a sunrise or sunset does not occur. example: \"2016-08-18T20:19:22-0400\"  # noqa: E501

        :param sunset: The sunset of this Forecast.  # noqa: E501
        :type: str
        """

        self._sunset = sunset

    @property
    def moonrise(self):
        """Gets the moonrise of this Forecast.  # noqa: E501

        First moonrise in local time. It reflects daylight savings time conventions. example: \"2016-08-18T20:35:50-0400\"  # noqa: E501

        :return: The moonrise of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._moonrise

    @moonrise.setter
    def moonrise(self, moonrise):
        """Sets the moonrise of this Forecast.

        First moonrise in local time. It reflects daylight savings time conventions. example: \"2016-08-18T20:35:50-0400\"  # noqa: E501

        :param moonrise: The moonrise of this Forecast.  # noqa: E501
        :type: str
        """

        self._moonrise = moonrise

    @property
    def moonset(self):
        """Gets the moonset of this Forecast.  # noqa: E501

        First moonset in local time. It reflects daylight savings time conventions. example: \"2016-08-18T20:35:50-0400\"  # noqa: E501

        :return: The moonset of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._moonset

    @moonset.setter
    def moonset(self, moonset):
        """Sets the moonset of this Forecast.

        First moonset in local time. It reflects daylight savings time conventions. example: \"2016-08-18T20:35:50-0400\"  # noqa: E501

        :param moonset: The moonset of this Forecast.  # noqa: E501
        :type: str
        """

        self._moonset = moonset

    @property
    def qualifier_code(self):
        """Gets the qualifier_code of this Forecast.  # noqa: E501

        A code for special forecasted weather criteria for the 12 and 24 hour dayparts  # noqa: E501

        :return: The qualifier_code of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._qualifier_code

    @qualifier_code.setter
    def qualifier_code(self, qualifier_code):
        """Sets the qualifier_code of this Forecast.

        A code for special forecasted weather criteria for the 12 and 24 hour dayparts  # noqa: E501

        :param qualifier_code: The qualifier_code of this Forecast.  # noqa: E501
        :type: str
        """

        self._qualifier_code = qualifier_code

    @property
    def qualifier(self):
        """Gets the qualifier of this Forecast.  # noqa: E501

        A phrase associated to the qualifier_code describing special forecasted weather criteria for the 12 and 24 hour dayparts.  # noqa: E501

        :return: The qualifier of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._qualifier

    @qualifier.setter
    def qualifier(self, qualifier):
        """Sets the qualifier of this Forecast.

        A phrase associated to the qualifier_code describing special forecasted weather criteria for the 12 and 24 hour dayparts.  # noqa: E501

        :param qualifier: The qualifier of this Forecast.  # noqa: E501
        :type: str
        """

        self._qualifier = qualifier

    @property
    def narrative(self):
        """Gets the narrative of this Forecast.  # noqa: E501

        The narrative forecast for the 24-hour period. example: \"Scattered thunderstorms possible. Highs in the low 90s and lows in the low 70s.\"  # noqa: E501

        :return: The narrative of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._narrative

    @narrative.setter
    def narrative(self, narrative):
        """Sets the narrative of this Forecast.

        The narrative forecast for the 24-hour period. example: \"Scattered thunderstorms possible. Highs in the low 90s and lows in the low 70s.\"  # noqa: E501

        :param narrative: The narrative of this Forecast.  # noqa: E501
        :type: str
        """

        self._narrative = narrative

    @property
    def qpf(self):
        """Gets the qpf of this Forecast.  # noqa: E501

        The forecasted measurable precipitation (liquid or liquid equivalent) during 12 or 24 hour period. example: 0.02  # noqa: E501

        :return: The qpf of this Forecast.  # noqa: E501
        :rtype: float
        """
        return self._qpf

    @qpf.setter
    def qpf(self, qpf):
        """Sets the qpf of this Forecast.

        The forecasted measurable precipitation (liquid or liquid equivalent) during 12 or 24 hour period. example: 0.02  # noqa: E501

        :param qpf: The qpf of this Forecast.  # noqa: E501
        :type: float
        """

        self._qpf = qpf

    @property
    def snow_qpf(self):
        """Gets the snow_qpf of this Forecast.  # noqa: E501

        The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. example: 0  # noqa: E501

        :return: The snow_qpf of this Forecast.  # noqa: E501
        :rtype: float
        """
        return self._snow_qpf

    @snow_qpf.setter
    def snow_qpf(self, snow_qpf):
        """Sets the snow_qpf of this Forecast.

        The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. example: 0  # noqa: E501

        :param snow_qpf: The snow_qpf of this Forecast.  # noqa: E501
        :type: float
        """

        self._snow_qpf = snow_qpf

    @property
    def snow_range(self):
        """Gets the snow_range of this Forecast.  # noqa: E501

        The expected amount of residual snow for the 12 or 24 hour period.  # noqa: E501

        :return: The snow_range of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._snow_range

    @snow_range.setter
    def snow_range(self, snow_range):
        """Sets the snow_range of this Forecast.

        The expected amount of residual snow for the 12 or 24 hour period.  # noqa: E501

        :param snow_range: The snow_range of this Forecast.  # noqa: E501
        :type: str
        """

        self._snow_range = snow_range

    @property
    def snow_phrase(self):
        """Gets the snow_phrase of this Forecast.  # noqa: E501

        A shortened text description of the forecasted snow accumulation during the forecast period (24 hours or 12 hours).  # noqa: E501

        :return: The snow_phrase of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._snow_phrase

    @snow_phrase.setter
    def snow_phrase(self, snow_phrase):
        """Sets the snow_phrase of this Forecast.

        A shortened text description of the forecasted snow accumulation during the forecast period (24 hours or 12 hours).  # noqa: E501

        :param snow_phrase: The snow_phrase of this Forecast.  # noqa: E501
        :type: str
        """

        self._snow_phrase = snow_phrase

    @property
    def snow_code(self):
        """Gets the snow_code of this Forecast.  # noqa: E501

        Residual snow accumulation code for the 12 or 24 hour forecast period. example: A9015  # noqa: E501

        :return: The snow_code of this Forecast.  # noqa: E501
        :rtype: str
        """
        return self._snow_code

    @snow_code.setter
    def snow_code(self, snow_code):
        """Sets the snow_code of this Forecast.

        Residual snow accumulation code for the 12 or 24 hour forecast period. example: A9015  # noqa: E501

        :param snow_code: The snow_code of this Forecast.  # noqa: E501
        :type: str
        """

        self._snow_code = snow_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Forecast):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Forecast):
            return True

        return self.to_dict() != other.to_dict()

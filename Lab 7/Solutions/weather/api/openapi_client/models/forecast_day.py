# coding: utf-8

"""
    Daily Forecast API

    The daily forecast API returns the geocode weather forecasts for the current day up to the days duration in the API endpoint. The daily forecast product can contain multiple days of daily forecasts for each location. Each day of a forecast can contain up to (3) \"temporal segments\" meaning three separate forecasts. For any given forecast day we offer day, night, and a 24-hour forecast (daily summary).   • Standard HTTP Cache-Control headers are used to define caching length. The TTL value is provided in the HTTP Header as an absolute time value using the “Expires” parameter. Example:  “Expires: Fri, 12 Jul 2013 12:00:00 GMT”.   • REQUIRED: HEADER Accept-Encoding: gzip  • All requests to the API’s should request that the response be compressed. Supported encoding format is: gzip  • PLEASE NOTE: The Day object will no longer appear in the API after 3:00pm Local Apparent Time. At 3pm Local Apparent Time, we recommend that your application no longer displays the Day object.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ForecastDay(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'accumulation_phrase': 'str',
        'alt__daypart_name': 'str',
        'clds': 'int',
        'day_ind': 'str',
        'daypart_name': 'str',
        'expire_time_gmt': 'float',
        'fcst_valid': 'float',
        'fcst_valid_local': 'float',
        'golf_category': 'str',
        'golf_index': 'int',
        'hi': 'int',
        'icon_code': 'int',
        'icon_extd': 'int',
        'long_daypart_name': 'str',
        'narrative': 'str',
        'num': 'int',
        'phrase_12char': 'str',
        'phrase_22char': 'str',
        'phrase_32char': 'str',
        'pop': 'int',
        'pop_phrase': 'str',
        'precip_type': 'str',
        'qpf': 'float',
        'qualifier': 'str',
        'qualifier_code': 'str',
        'rh': 'int',
        'shortcast': 'str',
        'snow_code': 'str',
        'snow_phrase': 'str',
        'snow_qpf': 'float',
        'snow_range': 'float',
        'subphrase_pt1': 'str',
        'subphrase_pt2': 'str',
        'subphrase_pt3': 'str',
        'temp': 'int',
        'temp_phrase': 'str',
        'thunder_enum': 'int',
        'thunder_enum_phrase': 'str',
        'uv_desc': 'str',
        'uv_index': 'int',
        'uv_index_raw': 'float',
        'uv_warning': 'int',
        'vocal_key': 'str',
        'wc': 'int',
        'wdir': 'int',
        'wdir_cardinal': 'str',
        'wind_phrase': 'str',
        'wspd': 'int',
        'wxman': 'str'
    }

    attribute_map = {
        'accumulation_phrase': 'accumulation_phrase',
        'alt__daypart_name': 'alt_ daypart_name',
        'clds': 'clds',
        'day_ind': 'day_ind',
        'daypart_name': 'daypart_name',
        'expire_time_gmt': 'expire_time_gmt',
        'fcst_valid': 'fcst_valid',
        'fcst_valid_local': 'fcst_valid_local',
        'golf_category': 'golf_category',
        'golf_index': 'golf_index',
        'hi': 'hi',
        'icon_code': 'icon_code',
        'icon_extd': 'icon_extd',
        'long_daypart_name': 'long_daypart_name',
        'narrative': 'narrative',
        'num': 'num',
        'phrase_12char': 'phrase_12char',
        'phrase_22char': 'phrase_22char',
        'phrase_32char': 'phrase_32char',
        'pop': 'pop',
        'pop_phrase': 'pop_phrase',
        'precip_type': 'precip_type',
        'qpf': 'qpf',
        'qualifier': 'qualifier',
        'qualifier_code': 'qualifier_code',
        'rh': 'rh',
        'shortcast': 'shortcast',
        'snow_code': 'snow_code',
        'snow_phrase': 'snow_phrase',
        'snow_qpf': 'snow_qpf',
        'snow_range': 'snow_range',
        'subphrase_pt1': 'subphrase_pt1',
        'subphrase_pt2': 'subphrase_pt2',
        'subphrase_pt3': 'subphrase_pt3',
        'temp': 'temp',
        'temp_phrase': 'temp_phrase',
        'thunder_enum': 'thunder_enum',
        'thunder_enum_phrase': 'thunder_enum_phrase',
        'uv_desc': 'uv_desc',
        'uv_index': 'uv_index',
        'uv_index_raw': 'uv_index_raw',
        'uv_warning': 'uv_warning',
        'vocal_key': 'vocal_key',
        'wc': 'wc',
        'wdir': 'wdir',
        'wdir_cardinal': 'wdir_cardinal',
        'wind_phrase': 'wind_phrase',
        'wspd': 'wspd',
        'wxman': 'wxman'
    }

    def __init__(self, accumulation_phrase=None, alt__daypart_name=None, clds=None, day_ind=None, daypart_name=None, expire_time_gmt=None, fcst_valid=None, fcst_valid_local=None, golf_category=None, golf_index=None, hi=None, icon_code=None, icon_extd=None, long_daypart_name=None, narrative=None, num=None, phrase_12char=None, phrase_22char=None, phrase_32char=None, pop=None, pop_phrase=None, precip_type=None, qpf=None, qualifier=None, qualifier_code=None, rh=None, shortcast=None, snow_code=None, snow_phrase=None, snow_qpf=None, snow_range=None, subphrase_pt1=None, subphrase_pt2=None, subphrase_pt3=None, temp=None, temp_phrase=None, thunder_enum=None, thunder_enum_phrase=None, uv_desc=None, uv_index=None, uv_index_raw=None, uv_warning=None, vocal_key=None, wc=None, wdir=None, wdir_cardinal=None, wind_phrase=None, wspd=None, wxman=None, local_vars_configuration=None):  # noqa: E501
        """ForecastDay - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._accumulation_phrase = None
        self._alt__daypart_name = None
        self._clds = None
        self._day_ind = None
        self._daypart_name = None
        self._expire_time_gmt = None
        self._fcst_valid = None
        self._fcst_valid_local = None
        self._golf_category = None
        self._golf_index = None
        self._hi = None
        self._icon_code = None
        self._icon_extd = None
        self._long_daypart_name = None
        self._narrative = None
        self._num = None
        self._phrase_12char = None
        self._phrase_22char = None
        self._phrase_32char = None
        self._pop = None
        self._pop_phrase = None
        self._precip_type = None
        self._qpf = None
        self._qualifier = None
        self._qualifier_code = None
        self._rh = None
        self._shortcast = None
        self._snow_code = None
        self._snow_phrase = None
        self._snow_qpf = None
        self._snow_range = None
        self._subphrase_pt1 = None
        self._subphrase_pt2 = None
        self._subphrase_pt3 = None
        self._temp = None
        self._temp_phrase = None
        self._thunder_enum = None
        self._thunder_enum_phrase = None
        self._uv_desc = None
        self._uv_index = None
        self._uv_index_raw = None
        self._uv_warning = None
        self._vocal_key = None
        self._wc = None
        self._wdir = None
        self._wdir_cardinal = None
        self._wind_phrase = None
        self._wspd = None
        self._wxman = None
        self.discriminator = None

        if accumulation_phrase is not None:
            self.accumulation_phrase = accumulation_phrase
        if alt__daypart_name is not None:
            self.alt__daypart_name = alt__daypart_name
        if clds is not None:
            self.clds = clds
        if day_ind is not None:
            self.day_ind = day_ind
        if daypart_name is not None:
            self.daypart_name = daypart_name
        if expire_time_gmt is not None:
            self.expire_time_gmt = expire_time_gmt
        if fcst_valid is not None:
            self.fcst_valid = fcst_valid
        if fcst_valid_local is not None:
            self.fcst_valid_local = fcst_valid_local
        if golf_category is not None:
            self.golf_category = golf_category
        if golf_index is not None:
            self.golf_index = golf_index
        if hi is not None:
            self.hi = hi
        if icon_code is not None:
            self.icon_code = icon_code
        if icon_extd is not None:
            self.icon_extd = icon_extd
        if long_daypart_name is not None:
            self.long_daypart_name = long_daypart_name
        if narrative is not None:
            self.narrative = narrative
        if num is not None:
            self.num = num
        if phrase_12char is not None:
            self.phrase_12char = phrase_12char
        if phrase_22char is not None:
            self.phrase_22char = phrase_22char
        if phrase_32char is not None:
            self.phrase_32char = phrase_32char
        if pop is not None:
            self.pop = pop
        if pop_phrase is not None:
            self.pop_phrase = pop_phrase
        if precip_type is not None:
            self.precip_type = precip_type
        if qpf is not None:
            self.qpf = qpf
        if qualifier is not None:
            self.qualifier = qualifier
        if qualifier_code is not None:
            self.qualifier_code = qualifier_code
        if rh is not None:
            self.rh = rh
        if shortcast is not None:
            self.shortcast = shortcast
        if snow_code is not None:
            self.snow_code = snow_code
        if snow_phrase is not None:
            self.snow_phrase = snow_phrase
        if snow_qpf is not None:
            self.snow_qpf = snow_qpf
        if snow_range is not None:
            self.snow_range = snow_range
        if subphrase_pt1 is not None:
            self.subphrase_pt1 = subphrase_pt1
        if subphrase_pt2 is not None:
            self.subphrase_pt2 = subphrase_pt2
        if subphrase_pt3 is not None:
            self.subphrase_pt3 = subphrase_pt3
        if temp is not None:
            self.temp = temp
        if temp_phrase is not None:
            self.temp_phrase = temp_phrase
        if thunder_enum is not None:
            self.thunder_enum = thunder_enum
        if thunder_enum_phrase is not None:
            self.thunder_enum_phrase = thunder_enum_phrase
        if uv_desc is not None:
            self.uv_desc = uv_desc
        if uv_index is not None:
            self.uv_index = uv_index
        if uv_index_raw is not None:
            self.uv_index_raw = uv_index_raw
        if uv_warning is not None:
            self.uv_warning = uv_warning
        if vocal_key is not None:
            self.vocal_key = vocal_key
        if wc is not None:
            self.wc = wc
        if wdir is not None:
            self.wdir = wdir
        if wdir_cardinal is not None:
            self.wdir_cardinal = wdir_cardinal
        if wind_phrase is not None:
            self.wind_phrase = wind_phrase
        if wspd is not None:
            self.wspd = wspd
        if wxman is not None:
            self.wxman = wxman

    @property
    def accumulation_phrase(self):
        """Gets the accumulation_phrase of this ForecastDay.  # noqa: E501

        An accumulation phrase of any precipitation type in the 12 hour forecast period.  # noqa: E501

        :return: The accumulation_phrase of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._accumulation_phrase

    @accumulation_phrase.setter
    def accumulation_phrase(self, accumulation_phrase):
        """Sets the accumulation_phrase of this ForecastDay.

        An accumulation phrase of any precipitation type in the 12 hour forecast period.  # noqa: E501

        :param accumulation_phrase: The accumulation_phrase of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._accumulation_phrase = accumulation_phrase

    @property
    def alt__daypart_name(self):
        """Gets the alt__daypart_name of this ForecastDay.  # noqa: E501

        A specialized version of the Daypart Name field. Certain holidays or historic events may replace the usual daypart name.  # noqa: E501

        :return: The alt__daypart_name of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._alt__daypart_name

    @alt__daypart_name.setter
    def alt__daypart_name(self, alt__daypart_name):
        """Sets the alt__daypart_name of this ForecastDay.

        A specialized version of the Daypart Name field. Certain holidays or historic events may replace the usual daypart name.  # noqa: E501

        :param alt__daypart_name: The alt__daypart_name of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._alt__daypart_name = alt__daypart_name

    @property
    def clds(self):
        """Gets the clds of this ForecastDay.  # noqa: E501

        Average cloud cover expressed as a percentage.  # noqa: E501

        :return: The clds of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._clds

    @clds.setter
    def clds(self, clds):
        """Sets the clds of this ForecastDay.

        Average cloud cover expressed as a percentage.  # noqa: E501

        :param clds: The clds of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._clds = clds

    @property
    def day_ind(self):
        """Gets the day_ind of this ForecastDay.  # noqa: E501

        Day or night indicator  # noqa: E501

        :return: The day_ind of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._day_ind

    @day_ind.setter
    def day_ind(self, day_ind):
        """Sets the day_ind of this ForecastDay.

        Day or night indicator  # noqa: E501

        :param day_ind: The day_ind of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._day_ind = day_ind

    @property
    def daypart_name(self):
        """Gets the daypart_name of this ForecastDay.  # noqa: E501

        The name of a 12 hour daypart not including day names in the first 48 hours.  # noqa: E501

        :return: The daypart_name of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._daypart_name

    @daypart_name.setter
    def daypart_name(self, daypart_name):
        """Sets the daypart_name of this ForecastDay.

        The name of a 12 hour daypart not including day names in the first 48 hours.  # noqa: E501

        :param daypart_name: The daypart_name of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._daypart_name = daypart_name

    @property
    def expire_time_gmt(self):
        """Gets the expire_time_gmt of this ForecastDay.  # noqa: E501

        Expiration time in UNIX seconds  # noqa: E501

        :return: The expire_time_gmt of this ForecastDay.  # noqa: E501
        :rtype: float
        """
        return self._expire_time_gmt

    @expire_time_gmt.setter
    def expire_time_gmt(self, expire_time_gmt):
        """Sets the expire_time_gmt of this ForecastDay.

        Expiration time in UNIX seconds  # noqa: E501

        :param expire_time_gmt: The expire_time_gmt of this ForecastDay.  # noqa: E501
        :type: float
        """

        self._expire_time_gmt = expire_time_gmt

    @property
    def fcst_valid(self):
        """Gets the fcst_valid of this ForecastDay.  # noqa: E501

        Time forecast is valid in UNIX seconds  # noqa: E501

        :return: The fcst_valid of this ForecastDay.  # noqa: E501
        :rtype: float
        """
        return self._fcst_valid

    @fcst_valid.setter
    def fcst_valid(self, fcst_valid):
        """Sets the fcst_valid of this ForecastDay.

        Time forecast is valid in UNIX seconds  # noqa: E501

        :param fcst_valid: The fcst_valid of this ForecastDay.  # noqa: E501
        :type: float
        """

        self._fcst_valid = fcst_valid

    @property
    def fcst_valid_local(self):
        """Gets the fcst_valid_local of this ForecastDay.  # noqa: E501

        Time forecast is valid in local apparent time.  # noqa: E501

        :return: The fcst_valid_local of this ForecastDay.  # noqa: E501
        :rtype: float
        """
        return self._fcst_valid_local

    @fcst_valid_local.setter
    def fcst_valid_local(self, fcst_valid_local):
        """Sets the fcst_valid_local of this ForecastDay.

        Time forecast is valid in local apparent time.  # noqa: E501

        :param fcst_valid_local: The fcst_valid_local of this ForecastDay.  # noqa: E501
        :type: float
        """

        self._fcst_valid_local = fcst_valid_local

    @property
    def golf_category(self):
        """Gets the golf_category of this ForecastDay.  # noqa: E501

        The Golf Index Category expressed as a phrase for the weather conditions for playing golf.  # noqa: E501

        :return: The golf_category of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._golf_category

    @golf_category.setter
    def golf_category(self, golf_category):
        """Sets the golf_category of this ForecastDay.

        The Golf Index Category expressed as a phrase for the weather conditions for playing golf.  # noqa: E501

        :param golf_category: The golf_category of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._golf_category = golf_category

    @property
    def golf_index(self):
        """Gets the golf_index of this ForecastDay.  # noqa: E501

        The Golf Index expresses on a scale of 0 to 10 the weather conditions for playing golf. Not applicable at night. 0-2=Very Poor, 3=Poor, 4-5=Fair, 6-7=Good, 8-9=Very Good, 10=Excellent  # noqa: E501

        :return: The golf_index of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._golf_index

    @golf_index.setter
    def golf_index(self, golf_index):
        """Sets the golf_index of this ForecastDay.

        The Golf Index expresses on a scale of 0 to 10 the weather conditions for playing golf. Not applicable at night. 0-2=Very Poor, 3=Poor, 4-5=Fair, 6-7=Good, 8-9=Very Good, 10=Excellent  # noqa: E501

        :param golf_index: The golf_index of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._golf_index = golf_index

    @property
    def hi(self):
        """Gets the hi of this ForecastDay.  # noqa: E501

        Heat Index - Maximum heat index. An apparent temperature. It represents what the air temperature “feels like” on exposed human skin due to the combined effect of warm temperatures and high humidity. When the temperature is 70°F or higher, the Feels Like value represents the computed Heat Index. For temperatures between 40°F and 70°F, the Feels Like value and Temperature are the same, regardless of wind speed and humidity, so use the Temperature value.  # noqa: E501

        :return: The hi of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._hi

    @hi.setter
    def hi(self, hi):
        """Sets the hi of this ForecastDay.

        Heat Index - Maximum heat index. An apparent temperature. It represents what the air temperature “feels like” on exposed human skin due to the combined effect of warm temperatures and high humidity. When the temperature is 70°F or higher, the Feels Like value represents the computed Heat Index. For temperatures between 40°F and 70°F, the Feels Like value and Temperature are the same, regardless of wind speed and humidity, so use the Temperature value.  # noqa: E501

        :param hi: The hi of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._hi = hi

    @property
    def icon_code(self):
        """Gets the icon_code of this ForecastDay.  # noqa: E501

        This number is the key to the weather icon lookup. The data field shows the icon number that is matched to represent the observed weather conditions. Please refer to the Forecast Icon Code, Weather Phrases and Images document.  # noqa: E501

        :return: The icon_code of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._icon_code

    @icon_code.setter
    def icon_code(self, icon_code):
        """Sets the icon_code of this ForecastDay.

        This number is the key to the weather icon lookup. The data field shows the icon number that is matched to represent the observed weather conditions. Please refer to the Forecast Icon Code, Weather Phrases and Images document.  # noqa: E501

        :param icon_code: The icon_code of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._icon_code = icon_code

    @property
    def icon_extd(self):
        """Gets the icon_extd of this ForecastDay.  # noqa: E501

        Code representing explicit full set sensible weather. Please refer to the Forecast Icon Code, Weather Phrases and Images document.  # noqa: E501

        :return: The icon_extd of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._icon_extd

    @icon_extd.setter
    def icon_extd(self, icon_extd):
        """Sets the icon_extd of this ForecastDay.

        Code representing explicit full set sensible weather. Please refer to the Forecast Icon Code, Weather Phrases and Images document.  # noqa: E501

        :param icon_extd: The icon_extd of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._icon_extd = icon_extd

    @property
    def long_daypart_name(self):
        """Gets the long_daypart_name of this ForecastDay.  # noqa: E501

        The named time frame for the valid weather forecast in an expanded format. The named time frame can be either for 12-hour periods or 24-hour periods.  # noqa: E501

        :return: The long_daypart_name of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._long_daypart_name

    @long_daypart_name.setter
    def long_daypart_name(self, long_daypart_name):
        """Sets the long_daypart_name of this ForecastDay.

        The named time frame for the valid weather forecast in an expanded format. The named time frame can be either for 12-hour periods or 24-hour periods.  # noqa: E501

        :param long_daypart_name: The long_daypart_name of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._long_daypart_name = long_daypart_name

    @property
    def narrative(self):
        """Gets the narrative of this ForecastDay.  # noqa: E501

        The narrative forecast for the daytime period.  # noqa: E501

        :return: The narrative of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._narrative

    @narrative.setter
    def narrative(self, narrative):
        """Sets the narrative of this ForecastDay.

        The narrative forecast for the daytime period.  # noqa: E501

        :param narrative: The narrative of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._narrative = narrative

    @property
    def num(self):
        """Gets the num of this ForecastDay.  # noqa: E501

        The sequential number that identifies each of the forecasted days in your feed. They start on day 1, which is the forecast for the current day. Then the forecast for tomorrow uses number 2, then number 3 for the day after tomorrow, and so forth.  # noqa: E501

        :return: The num of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._num

    @num.setter
    def num(self, num):
        """Sets the num of this ForecastDay.

        The sequential number that identifies each of the forecasted days in your feed. They start on day 1, which is the forecast for the current day. Then the forecast for tomorrow uses number 2, then number 3 for the day after tomorrow, and so forth.  # noqa: E501

        :param num: The num of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._num = num

    @property
    def phrase_12char(self):
        """Gets the phrase_12char of this ForecastDay.  # noqa: E501

        Sensible weather phrase  # noqa: E501

        :return: The phrase_12char of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._phrase_12char

    @phrase_12char.setter
    def phrase_12char(self, phrase_12char):
        """Sets the phrase_12char of this ForecastDay.

        Sensible weather phrase  # noqa: E501

        :param phrase_12char: The phrase_12char of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._phrase_12char = phrase_12char

    @property
    def phrase_22char(self):
        """Gets the phrase_22char of this ForecastDay.  # noqa: E501

        Sensible weather phrase  # noqa: E501

        :return: The phrase_22char of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._phrase_22char

    @phrase_22char.setter
    def phrase_22char(self, phrase_22char):
        """Sets the phrase_22char of this ForecastDay.

        Sensible weather phrase  # noqa: E501

        :param phrase_22char: The phrase_22char of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._phrase_22char = phrase_22char

    @property
    def phrase_32char(self):
        """Gets the phrase_32char of this ForecastDay.  # noqa: E501

        Sensible weather phrase  # noqa: E501

        :return: The phrase_32char of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._phrase_32char

    @phrase_32char.setter
    def phrase_32char(self, phrase_32char):
        """Sets the phrase_32char of this ForecastDay.

        Sensible weather phrase  # noqa: E501

        :param phrase_32char: The phrase_32char of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._phrase_32char = phrase_32char

    @property
    def pop(self):
        """Gets the pop of this ForecastDay.  # noqa: E501

        Sensible maximum probability of precipitation.  # noqa: E501

        :return: The pop of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._pop

    @pop.setter
    def pop(self, pop):
        """Sets the pop of this ForecastDay.

        Sensible maximum probability of precipitation.  # noqa: E501

        :param pop: The pop of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._pop = pop

    @property
    def pop_phrase(self):
        """Gets the pop_phrase of this ForecastDay.  # noqa: E501

        Probability of precipitation phrase.  # noqa: E501

        :return: The pop_phrase of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._pop_phrase

    @pop_phrase.setter
    def pop_phrase(self, pop_phrase):
        """Sets the pop_phrase of this ForecastDay.

        Probability of precipitation phrase.  # noqa: E501

        :param pop_phrase: The pop_phrase of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._pop_phrase = pop_phrase

    @property
    def precip_type(self):
        """Gets the precip_type of this ForecastDay.  # noqa: E501

        Type of precipitation to display with the probability of precipitation (pop) data element.  # noqa: E501

        :return: The precip_type of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._precip_type

    @precip_type.setter
    def precip_type(self, precip_type):
        """Sets the precip_type of this ForecastDay.

        Type of precipitation to display with the probability of precipitation (pop) data element.  # noqa: E501

        :param precip_type: The precip_type of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._precip_type = precip_type

    @property
    def qpf(self):
        """Gets the qpf of this ForecastDay.  # noqa: E501

        The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 hour forecast period.  # noqa: E501

        :return: The qpf of this ForecastDay.  # noqa: E501
        :rtype: float
        """
        return self._qpf

    @qpf.setter
    def qpf(self, qpf):
        """Sets the qpf of this ForecastDay.

        The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 hour forecast period.  # noqa: E501

        :param qpf: The qpf of this ForecastDay.  # noqa: E501
        :type: float
        """

        self._qpf = qpf

    @property
    def qualifier(self):
        """Gets the qualifier of this ForecastDay.  # noqa: E501

        A forecast qualifier that is applicable to the 12 hour forecast period.  # noqa: E501

        :return: The qualifier of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._qualifier

    @qualifier.setter
    def qualifier(self, qualifier):
        """Sets the qualifier of this ForecastDay.

        A forecast qualifier that is applicable to the 12 hour forecast period.  # noqa: E501

        :param qualifier: The qualifier of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._qualifier = qualifier

    @property
    def qualifier_code(self):
        """Gets the qualifier_code of this ForecastDay.  # noqa: E501

        A code for the forecast qualifier applicable to the 12 hour forecast period.  # noqa: E501

        :return: The qualifier_code of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._qualifier_code

    @qualifier_code.setter
    def qualifier_code(self, qualifier_code):
        """Sets the qualifier_code of this ForecastDay.

        A code for the forecast qualifier applicable to the 12 hour forecast period.  # noqa: E501

        :param qualifier_code: The qualifier_code of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._qualifier_code = qualifier_code

    @property
    def rh(self):
        """Gets the rh of this ForecastDay.  # noqa: E501

        The daytime relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.  # noqa: E501

        :return: The rh of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._rh

    @rh.setter
    def rh(self, rh):
        """Sets the rh of this ForecastDay.

        The daytime relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.  # noqa: E501

        :param rh: The rh of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._rh = rh

    @property
    def shortcast(self):
        """Gets the shortcast of this ForecastDay.  # noqa: E501

        An abbreviated sensible weather portion of narrative forecast.  # noqa: E501

        :return: The shortcast of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._shortcast

    @shortcast.setter
    def shortcast(self, shortcast):
        """Sets the shortcast of this ForecastDay.

        An abbreviated sensible weather portion of narrative forecast.  # noqa: E501

        :param shortcast: The shortcast of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._shortcast = shortcast

    @property
    def snow_code(self):
        """Gets the snow_code of this ForecastDay.  # noqa: E501

        Residual snow accumulation code for the 12 or 24 hour forecast period.  # noqa: E501

        :return: The snow_code of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._snow_code

    @snow_code.setter
    def snow_code(self, snow_code):
        """Sets the snow_code of this ForecastDay.

        Residual snow accumulation code for the 12 or 24 hour forecast period.  # noqa: E501

        :param snow_code: The snow_code of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._snow_code = snow_code

    @property
    def snow_phrase(self):
        """Gets the snow_phrase of this ForecastDay.  # noqa: E501

        Snow accumulation phrase for the 12 hour forecast period.  # noqa: E501

        :return: The snow_phrase of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._snow_phrase

    @snow_phrase.setter
    def snow_phrase(self, snow_phrase):
        """Sets the snow_phrase of this ForecastDay.

        Snow accumulation phrase for the 12 hour forecast period.  # noqa: E501

        :param snow_phrase: The snow_phrase of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._snow_phrase = snow_phrase

    @property
    def snow_qpf(self):
        """Gets the snow_qpf of this ForecastDay.  # noqa: E501

        The forecasted measurable precipitation as snow during the 12 hour forecast period.  # noqa: E501

        :return: The snow_qpf of this ForecastDay.  # noqa: E501
        :rtype: float
        """
        return self._snow_qpf

    @snow_qpf.setter
    def snow_qpf(self, snow_qpf):
        """Sets the snow_qpf of this ForecastDay.

        The forecasted measurable precipitation as snow during the 12 hour forecast period.  # noqa: E501

        :param snow_qpf: The snow_qpf of this ForecastDay.  # noqa: E501
        :type: float
        """

        self._snow_qpf = snow_qpf

    @property
    def snow_range(self):
        """Gets the snow_range of this ForecastDay.  # noqa: E501

        Snow accumulation amount for the 12 hour forecast period.  # noqa: E501

        :return: The snow_range of this ForecastDay.  # noqa: E501
        :rtype: float
        """
        return self._snow_range

    @snow_range.setter
    def snow_range(self, snow_range):
        """Sets the snow_range of this ForecastDay.

        Snow accumulation amount for the 12 hour forecast period.  # noqa: E501

        :param snow_range: The snow_range of this ForecastDay.  # noqa: E501
        :type: float
        """

        self._snow_range = snow_range

    @property
    def subphrase_pt1(self):
        """Gets the subphrase_pt1 of this ForecastDay.  # noqa: E501

        Part 1 of 3-part daytime sensible weather phrase.  # noqa: E501

        :return: The subphrase_pt1 of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._subphrase_pt1

    @subphrase_pt1.setter
    def subphrase_pt1(self, subphrase_pt1):
        """Sets the subphrase_pt1 of this ForecastDay.

        Part 1 of 3-part daytime sensible weather phrase.  # noqa: E501

        :param subphrase_pt1: The subphrase_pt1 of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._subphrase_pt1 = subphrase_pt1

    @property
    def subphrase_pt2(self):
        """Gets the subphrase_pt2 of this ForecastDay.  # noqa: E501

        Part 2 of 3-part daytime sensible weather phrase.  # noqa: E501

        :return: The subphrase_pt2 of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._subphrase_pt2

    @subphrase_pt2.setter
    def subphrase_pt2(self, subphrase_pt2):
        """Sets the subphrase_pt2 of this ForecastDay.

        Part 2 of 3-part daytime sensible weather phrase.  # noqa: E501

        :param subphrase_pt2: The subphrase_pt2 of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._subphrase_pt2 = subphrase_pt2

    @property
    def subphrase_pt3(self):
        """Gets the subphrase_pt3 of this ForecastDay.  # noqa: E501

        Part 3 of 3-part daytime sensible weather phrase.  # noqa: E501

        :return: The subphrase_pt3 of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._subphrase_pt3

    @subphrase_pt3.setter
    def subphrase_pt3(self, subphrase_pt3):
        """Sets the subphrase_pt3 of this ForecastDay.

        Part 3 of 3-part daytime sensible weather phrase.  # noqa: E501

        :param subphrase_pt3: The subphrase_pt3 of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._subphrase_pt3 = subphrase_pt3

    @property
    def temp(self):
        """Gets the temp of this ForecastDay.  # noqa: E501

        The forecasted temperature for midpoint day (1pm) or midpoint night (1am) for a 12 hour daypart.  # noqa: E501

        :return: The temp of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._temp

    @temp.setter
    def temp(self, temp):
        """Sets the temp of this ForecastDay.

        The forecasted temperature for midpoint day (1pm) or midpoint night (1am) for a 12 hour daypart.  # noqa: E501

        :param temp: The temp of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._temp = temp

    @property
    def temp_phrase(self):
        """Gets the temp_phrase of this ForecastDay.  # noqa: E501

        The short phrase containing the forecasted high or low temperature for 12 hour forecast period.  # noqa: E501

        :return: The temp_phrase of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._temp_phrase

    @temp_phrase.setter
    def temp_phrase(self, temp_phrase):
        """Sets the temp_phrase of this ForecastDay.

        The short phrase containing the forecasted high or low temperature for 12 hour forecast period.  # noqa: E501

        :param temp_phrase: The temp_phrase of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._temp_phrase = temp_phrase

    @property
    def thunder_enum(self):
        """Gets the thunder_enum of this ForecastDay.  # noqa: E501

        The enumeration of thunderstorm probability within an area for a 12 hour daypart.  # noqa: E501

        :return: The thunder_enum of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._thunder_enum

    @thunder_enum.setter
    def thunder_enum(self, thunder_enum):
        """Sets the thunder_enum of this ForecastDay.

        The enumeration of thunderstorm probability within an area for a 12 hour daypart.  # noqa: E501

        :param thunder_enum: The thunder_enum of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._thunder_enum = thunder_enum

    @property
    def thunder_enum_phrase(self):
        """Gets the thunder_enum_phrase of this ForecastDay.  # noqa: E501

        The description of probability thunderstorm activity in an area for 12 hour daypart.  # noqa: E501

        :return: The thunder_enum_phrase of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._thunder_enum_phrase

    @thunder_enum_phrase.setter
    def thunder_enum_phrase(self, thunder_enum_phrase):
        """Sets the thunder_enum_phrase of this ForecastDay.

        The description of probability thunderstorm activity in an area for 12 hour daypart.  # noqa: E501

        :param thunder_enum_phrase: The thunder_enum_phrase of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._thunder_enum_phrase = thunder_enum_phrase

    @property
    def uv_desc(self):
        """Gets the uv_desc of this ForecastDay.  # noqa: E501

        The UV Index Description which complements the UV Index value by providing an associated level of risk of skin damage due to exposure. 2 is Not Available, -1 is No Report, 0 to 2 is Low, 3 to 5 is Moderate, 6 to 7 is High, 8 to 10 is Very High, 11 to 16 is Extreme  # noqa: E501

        :return: The uv_desc of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._uv_desc

    @uv_desc.setter
    def uv_desc(self, uv_desc):
        """Sets the uv_desc of this ForecastDay.

        The UV Index Description which complements the UV Index value by providing an associated level of risk of skin damage due to exposure. 2 is Not Available, -1 is No Report, 0 to 2 is Low, 3 to 5 is Moderate, 6 to 7 is High, 8 to 10 is Very High, 11 to 16 is Extreme  # noqa: E501

        :param uv_desc: The uv_desc of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._uv_desc = uv_desc

    @property
    def uv_index(self):
        """Gets the uv_index of this ForecastDay.  # noqa: E501

        Maximum UV index for the 12 hour forecast period.  # noqa: E501

        :return: The uv_index of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._uv_index

    @uv_index.setter
    def uv_index(self, uv_index):
        """Sets the uv_index of this ForecastDay.

        Maximum UV index for the 12 hour forecast period.  # noqa: E501

        :param uv_index: The uv_index of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._uv_index = uv_index

    @property
    def uv_index_raw(self):
        """Gets the uv_index_raw of this ForecastDay.  # noqa: E501

        The non-truncated UV Index which is the intensity of the solar radiation based on a number of factors.  # noqa: E501

        :return: The uv_index_raw of this ForecastDay.  # noqa: E501
        :rtype: float
        """
        return self._uv_index_raw

    @uv_index_raw.setter
    def uv_index_raw(self, uv_index_raw):
        """Sets the uv_index_raw of this ForecastDay.

        The non-truncated UV Index which is the intensity of the solar radiation based on a number of factors.  # noqa: E501

        :param uv_index_raw: The uv_index_raw of this ForecastDay.  # noqa: E501
        :type: float
        """

        self._uv_index_raw = uv_index_raw

    @property
    def uv_warning(self):
        """Gets the uv_warning of this ForecastDay.  # noqa: E501

        TWC-created UV warning based on UV index of 11 or greater.  # noqa: E501

        :return: The uv_warning of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._uv_warning

    @uv_warning.setter
    def uv_warning(self, uv_warning):
        """Sets the uv_warning of this ForecastDay.

        TWC-created UV warning based on UV index of 11 or greater.  # noqa: E501

        :param uv_warning: The uv_warning of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._uv_warning = uv_warning

    @property
    def vocal_key(self):
        """Gets the vocal_key of this ForecastDay.  # noqa: E501

        An encoded narrative forecast used for creating computer-generated audio narratives of the forecast period. TWC use only.  # noqa: E501

        :return: The vocal_key of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._vocal_key

    @vocal_key.setter
    def vocal_key(self, vocal_key):
        """Sets the vocal_key of this ForecastDay.

        An encoded narrative forecast used for creating computer-generated audio narratives of the forecast period. TWC use only.  # noqa: E501

        :param vocal_key: The vocal_key of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._vocal_key = vocal_key

    @property
    def wc(self):
        """Gets the wc of this ForecastDay.  # noqa: E501

        Wind Chill - Minimum wind chill. An apparent temperature. It represents what the air temperature “feels like” on exposed human skin due to the combined effect of the cold temperatures and wind speed. When the temperature is 61°F or lower the Feels Like value represents the computed Wind Chill so display the Wind Chill value. For temperatures between 61°F and 75°F, the Feels Like value and Temperature are the same, regardless of wind speed and humidity, so display the Temperature value.  # noqa: E501

        :return: The wc of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._wc

    @wc.setter
    def wc(self, wc):
        """Sets the wc of this ForecastDay.

        Wind Chill - Minimum wind chill. An apparent temperature. It represents what the air temperature “feels like” on exposed human skin due to the combined effect of the cold temperatures and wind speed. When the temperature is 61°F or lower the Feels Like value represents the computed Wind Chill so display the Wind Chill value. For temperatures between 61°F and 75°F, the Feels Like value and Temperature are the same, regardless of wind speed and humidity, so display the Temperature value.  # noqa: E501

        :param wc: The wc of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._wc = wc

    @property
    def wdir(self):
        """Gets the wdir of this ForecastDay.  # noqa: E501

        Daytime average wind direction in magnetic notation.  # noqa: E501

        :return: The wdir of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._wdir

    @wdir.setter
    def wdir(self, wdir):
        """Sets the wdir of this ForecastDay.

        Daytime average wind direction in magnetic notation.  # noqa: E501

        :param wdir: The wdir of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._wdir = wdir

    @property
    def wdir_cardinal(self):
        """Gets the wdir_cardinal of this ForecastDay.  # noqa: E501

        Daytime average wind direction in cardinal notation.  # noqa: E501

        :return: The wdir_cardinal of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._wdir_cardinal

    @wdir_cardinal.setter
    def wdir_cardinal(self, wdir_cardinal):
        """Sets the wdir_cardinal of this ForecastDay.

        Daytime average wind direction in cardinal notation.  # noqa: E501

        :param wdir_cardinal: The wdir_cardinal of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._wdir_cardinal = wdir_cardinal

    @property
    def wind_phrase(self):
        """Gets the wind_phrase of this ForecastDay.  # noqa: E501

        The phrase that describes the wind direction and speed for a 12 hour daypart.  # noqa: E501

        :return: The wind_phrase of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._wind_phrase

    @wind_phrase.setter
    def wind_phrase(self, wind_phrase):
        """Sets the wind_phrase of this ForecastDay.

        The phrase that describes the wind direction and speed for a 12 hour daypart.  # noqa: E501

        :param wind_phrase: The wind_phrase of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._wind_phrase = wind_phrase

    @property
    def wspd(self):
        """Gets the wspd of this ForecastDay.  # noqa: E501

        Wind Speed - The maximum forecasted wind speed. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the hourly current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as \"from whence the wind blows\" meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back.  # noqa: E501

        :return: The wspd of this ForecastDay.  # noqa: E501
        :rtype: int
        """
        return self._wspd

    @wspd.setter
    def wspd(self, wspd):
        """Sets the wspd of this ForecastDay.

        Wind Speed - The maximum forecasted wind speed. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the hourly current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as \"from whence the wind blows\" meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back.  # noqa: E501

        :param wspd: The wspd of this ForecastDay.  # noqa: E501
        :type: int
        """

        self._wspd = wspd

    @property
    def wxman(self):
        """Gets the wxman of this ForecastDay.  # noqa: E501

        The code to enable the Weather Man animation for forecast period. TWC use only.  # noqa: E501

        :return: The wxman of this ForecastDay.  # noqa: E501
        :rtype: str
        """
        return self._wxman

    @wxman.setter
    def wxman(self, wxman):
        """Sets the wxman of this ForecastDay.

        The code to enable the Weather Man animation for forecast period. TWC use only.  # noqa: E501

        :param wxman: The wxman of this ForecastDay.  # noqa: E501
        :type: str
        """

        self._wxman = wxman

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForecastDay):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ForecastDay):
            return True

        return self.to_dict() != other.to_dict()

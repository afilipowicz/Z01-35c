# coding: utf-8

"""
    Daily Forecast API

    The daily forecast API returns the geocode weather forecasts for the current day up to the days duration in the API endpoint. The daily forecast product can contain multiple days of daily forecasts for each location. Each day of a forecast can contain up to (3) \"temporal segments\" meaning three separate forecasts. For any given forecast day we offer day, night, and a 24-hour forecast (daily summary).   • Standard HTTP Cache-Control headers are used to define caching length. The TTL value is provided in the HTTP Header as an absolute time value using the “Expires” parameter. Example:  “Expires: Fri, 12 Jul 2013 12:00:00 GMT”.   • REQUIRED: HEADER Accept-Encoding: gzip  • All requests to the API’s should request that the response be compressed. Supported encoding format is: gzip  • PLEASE NOTE: The Day object will no longer appear in the API after 3:00pm Local Apparent Time. At 3pm Local Apparent Time, we recommend that your application no longer displays the Day object.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SuccessMetadataSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language': 'str',
        'transaction_id': 'str',
        'version': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'units': 'str',
        'expire_time_gmt': 'float',
        'status_code': 'int'
    }

    attribute_map = {
        'language': 'language',
        'transaction_id': 'transactionId',
        'version': 'version',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'units': 'units',
        'expire_time_gmt': 'expire_time_gmt',
        'status_code': 'status_code'
    }

    def __init__(self, language=None, transaction_id=None, version=None, latitude=None, longitude=None, units=None, expire_time_gmt=None, status_code=None, local_vars_configuration=None):  # noqa: E501
        """SuccessMetadataSchema - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language = None
        self._transaction_id = None
        self._version = None
        self._latitude = None
        self._longitude = None
        self._units = None
        self._expire_time_gmt = None
        self._status_code = None
        self.discriminator = None

        if language is not None:
            self.language = language
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if version is not None:
            self.version = version
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if units is not None:
            self.units = units
        if expire_time_gmt is not None:
            self.expire_time_gmt = expire_time_gmt
        if status_code is not None:
            self.status_code = status_code

    @property
    def language(self):
        """Gets the language of this SuccessMetadataSchema.  # noqa: E501

        The language to return the response in. For example, en-US, es, es-MX, fr-FR.  # noqa: E501

        :return: The language of this SuccessMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SuccessMetadataSchema.

        The language to return the response in. For example, en-US, es, es-MX, fr-FR.  # noqa: E501

        :param language: The language of this SuccessMetadataSchema.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def transaction_id(self):
        """Gets the transaction_id of this SuccessMetadataSchema.  # noqa: E501

        Transaction ID for this call of the API. The format varies for APIs and technology stacks. For example, 1407766348658:1285362530.  # noqa: E501

        :return: The transaction_id of this SuccessMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this SuccessMetadataSchema.

        Transaction ID for this call of the API. The format varies for APIs and technology stacks. For example, 1407766348658:1285362530.  # noqa: E501

        :param transaction_id: The transaction_id of this SuccessMetadataSchema.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def version(self):
        """Gets the version of this SuccessMetadataSchema.  # noqa: E501

        The version number of the API. For example, v1.  # noqa: E501

        :return: The version of this SuccessMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SuccessMetadataSchema.

        The version number of the API. For example, v1.  # noqa: E501

        :param version: The version of this SuccessMetadataSchema.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def latitude(self):
        """Gets the latitude of this SuccessMetadataSchema.  # noqa: E501

        Numeric value from -90 to 90 which specifies the distance north or south of the equator.  # noqa: E501

        :return: The latitude of this SuccessMetadataSchema.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this SuccessMetadataSchema.

        Numeric value from -90 to 90 which specifies the distance north or south of the equator.  # noqa: E501

        :param latitude: The latitude of this SuccessMetadataSchema.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this SuccessMetadataSchema.  # noqa: E501

        Numeric value from -180 to 180 which specifies the distance east or west of the prime meridian.  # noqa: E501

        :return: The longitude of this SuccessMetadataSchema.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this SuccessMetadataSchema.

        Numeric value from -180 to 180 which specifies the distance east or west of the prime meridian.  # noqa: E501

        :param longitude: The longitude of this SuccessMetadataSchema.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def units(self):
        """Gets the units of this SuccessMetadataSchema.  # noqa: E501

        An echo parameter that displays the default or requested units of measure (UOM) for various numeric values. Valid UOM: e, m, h, s.  # noqa: E501

        :return: The units of this SuccessMetadataSchema.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this SuccessMetadataSchema.

        An echo parameter that displays the default or requested units of measure (UOM) for various numeric values. Valid UOM: e, m, h, s.  # noqa: E501

        :param units: The units of this SuccessMetadataSchema.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def expire_time_gmt(self):
        """Gets the expire_time_gmt of this SuccessMetadataSchema.  # noqa: E501

        The data expiration time in UNIX seconds. The value in this data element should be used to expire and remove a record from your system. For example, 1380170732.  # noqa: E501

        :return: The expire_time_gmt of this SuccessMetadataSchema.  # noqa: E501
        :rtype: float
        """
        return self._expire_time_gmt

    @expire_time_gmt.setter
    def expire_time_gmt(self, expire_time_gmt):
        """Sets the expire_time_gmt of this SuccessMetadataSchema.

        The data expiration time in UNIX seconds. The value in this data element should be used to expire and remove a record from your system. For example, 1380170732.  # noqa: E501

        :param expire_time_gmt: The expire_time_gmt of this SuccessMetadataSchema.  # noqa: E501
        :type: float
        """

        self._expire_time_gmt = expire_time_gmt

    @property
    def status_code(self):
        """Gets the status_code of this SuccessMetadataSchema.  # noqa: E501

        The status code of the response message.  # noqa: E501

        :return: The status_code of this SuccessMetadataSchema.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this SuccessMetadataSchema.

        The status code of the response message.  # noqa: E501

        :param status_code: The status_code of this SuccessMetadataSchema.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuccessMetadataSchema):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SuccessMetadataSchema):
            return True

        return self.to_dict() != other.to_dict()

# coding: utf-8

"""
    Daily Forecast API

    The daily forecast API returns the geocode weather forecasts for the current day up to the days duration in the API endpoint. The daily forecast product can contain multiple days of daily forecasts for each location. Each day of a forecast can contain up to (3) \"temporal segments\" meaning three separate forecasts. For any given forecast day we offer day, night, and a 24-hour forecast (daily summary).   • Standard HTTP Cache-Control headers are used to define caching length. The TTL value is provided in the HTTP Header as an absolute time value using the “Expires” parameter. Example:  “Expires: Fri, 12 Jul 2013 12:00:00 GMT”.   • REQUIRED: HEADER Accept-Encoding: gzip  • All requests to the API’s should request that the response be compressed. Supported encoding format is: gzip  • PLEASE NOTE: The Day object will no longer appear in the API after 3:00pm Local Apparent Time. At 3pm Local Apparent Time, we recommend that your application no longer displays the Day object.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SuccessSchema(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'metadata': 'SuccessMetadataSchema',
        'forecasts': 'list[Forecast]'
    }

    attribute_map = {
        'metadata': 'metadata',
        'forecasts': 'forecasts'
    }

    def __init__(self, metadata=None, forecasts=None, local_vars_configuration=None):  # noqa: E501
        """SuccessSchema - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._metadata = None
        self._forecasts = None
        self.discriminator = None

        if metadata is not None:
            self.metadata = metadata
        if forecasts is not None:
            self.forecasts = forecasts

    @property
    def metadata(self):
        """Gets the metadata of this SuccessSchema.  # noqa: E501


        :return: The metadata of this SuccessSchema.  # noqa: E501
        :rtype: SuccessMetadataSchema
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SuccessSchema.


        :param metadata: The metadata of this SuccessSchema.  # noqa: E501
        :type: SuccessMetadataSchema
        """

        self._metadata = metadata

    @property
    def forecasts(self):
        """Gets the forecasts of this SuccessSchema.  # noqa: E501


        :return: The forecasts of this SuccessSchema.  # noqa: E501
        :rtype: list[Forecast]
        """
        return self._forecasts

    @forecasts.setter
    def forecasts(self, forecasts):
        """Sets the forecasts of this SuccessSchema.


        :param forecasts: The forecasts of this SuccessSchema.  # noqa: E501
        :type: list[Forecast]
        """

        self._forecasts = forecasts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SuccessSchema):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SuccessSchema):
            return True

        return self.to_dict() != other.to_dict()
